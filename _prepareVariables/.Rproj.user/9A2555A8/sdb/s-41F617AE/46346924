{
    "collab_server" : "",
    "contents" : "\n# Calculate bioclimatic variables about ETP\n# Bunn & Castro\n# CIAT, 2017\n\n# Load Libraries\n\nlibrary(stringr)\nlibrary(rgdal)\nlibrary(raster)\nlibrary(maptools)\nlibrary(dismo)\nlibrary(SDMTools)\nlibrary(maps)\nlibrary(rgeos)\nlibrary(doParallel)\nlibrary(doMC)\nlibrary(gtools)\nlibrary(doSNOW)\nlibrary(dplyr)\n\n# Files\n\nOSys <- Sys.info(); OSys <- OSys[names(OSys)=='sysname']\nif(OSys == 'Linux'){\n  path <- '//mnt/workspace_cluster_9/Coffee_Cocoa2/_cam' \n} else {\n  if(OSys == 'Windows'){\n    path <- '//dapadfs/Workspace_cluster_9/Coffee_Cocoa2/_cam'\n  }\n}\n\n# Function to others bioclimatics variables\n\ncumTemp <- function(x) {\n  \n  p <- matrix(nrow = 1, ncol = 4)\n  colnames(p) <- paste('bio', 21:24, sep = '')\n  \n  w <- x[25:36] ### tmax\n  y <- x[13:24] ### tmean\n  x <- x[1:12]  ### Prec-PET\n  z <- x\n  \n  ### if the values are NA the bios are NA\n  if(all(is.na(x))) {\n    p[,'bio21'] <- NA\n    p[,'bio22'] <- NA\n    p[,'bio23'] <- NA\n    p[,'bio24'] <- NA\n  } else {\n    \n    ## cumulative deficit to determine dry season (=Bio22)\n    \n    # print('Bio 22...')\n    \n    x <- z\n    lng <- length(x)\n    x <- c(x, x[1:12])\n    x[x>0] <- NA\n    cumdef <- matrix(ncol = 12, nrow = lng)\n    for (i in 1:12) {\n      cumdef[, i] <- x[i:(lng + i - 1)]\n    }\n    p[,'bio22'] <- min(c(0,apply(cumdef, MARGIN = 1, FUN = cumsum)),na.rm=T)\n    \n    ## cumulative surplus to determine growing season\n    x <- z\n    lng <- length(x)\n    x <- c(z, z[1:12])\n    x[x<0] <- NA\n    cumplus <- matrix(ncol = 12, nrow = lng)\n    \n    for (i in 1:12) {\n      \n      cumplus[, i] <- x[i:(lng + i - 1)]\n      \n    }\n    \n    ### If there is no dry season\n    ### the length becomes 0\n    ### the growing season temp is the mean of monthly mean temp\n    ### the dry season max temp is the max temp of the driest month \n    \n    if(p[,'bio22']==0){\n      \n      p[,'bio21'] <- 0\n      p[,'bio23'] <- mean(y)\n      p[,'bio24'] <- w[which.min(z)]\n      \n    } else {\n      \n      ### the mean temperatures for all possible seasons\n      y <- c(y, y[1:12])\n      n <- matrix(ncol = 12, nrow = lng)\n      for (i in 1:12) {\n        \n        n[, i] <- y[i:(lng + i - 1)]\n        \n      }\n      \n      meantemp <- apply(n, MARGIN = 1, FUN = cumsum)\n      \n      ### the max temperatures for all possible seasons\n      w <- c(w, w[1:12])\n      n <- matrix(ncol = 12, nrow = lng)\n      \n      for (i in 1:12) {\n        \n        n[, i] <- w[i:(lng + i - 1)]\n        \n      }\n      maxtemp <- apply(n, MARGIN = 1, FUN = cumsum)\n      \n      ### Consecutive months with Prec<PET (=bio21)\n      x <- z\n      x <- c(x, x[1:12])\n      x[x>0] <- NA\n      x[x<0] <- 1\n      o <- matrix(ncol = 12, nrow = lng)\n      \n      for (i in 1:12) {\n        \n        o[, i] <- x[i:(lng + i - 1)]\n        \n      }\n      \n      con_months <- max(apply(o,1,cumsum),na.rm=T)\n      p[,'bio21'] <- con_months\n      \n      ### if the dry season is 12 months the growing season mean is the mean of the wettest month\n      \n      if(con_months==12){\n        \n        p[,'bio23'] <- y[which.max(z)]\n        \n      } else { \n        \n        ### The meantemp of the wettest season\n        p[,'bio23'] <- meantemp[which.max(apply(cumplus, MARGIN = 1, FUN = cumsum))]/(12-con_months)\n        \n      }\n      ### The mean maxtemp of the driest season\n      \n      p[,'bio24'] <- maxtemp[which.min(apply(cumdef, MARGIN = 1, FUN = cumsum))]/con_months    \n      \n    }\n  \n  }\n  \n  return(p)\n  \n}\n\n# Function to calculate ETPbios\n\netpvars <- function(x){\n  \n  p <- matrix(nrow = 1, ncol = 9)\n  colnames(p) = paste('bio', 25:33, sep = '')\n  \n  tavg <- x[25:36] ### Temp\n  prec <- x[13:24] ### PREC\n  pet <- x[1:12]  ### PET\n  \n  ### if the values are NA the bios are NA\n  if(all(is.na(x))) { \n    return(p)\n  } else {\n    \n    window <- function(x)  { \n      lng <- length(x)\n      x <- c(x,  x[1:3])\n      m <- matrix(ncol = 3, nrow = lng)\n      for (i in 1:3) { m[,i] <- x[i:(lng+i-1)] }\n      apply(m, MARGIN = 1, FUN = sum)\n    }\n    \n    ### BIO_23: Annual PET\n    p[,1] <- sum(pet)\n    ### BIO_24: PET seasonality (Coefficient of Variation)\n    p[,2] <- cv(pet)\n    ### BIO_25: MAX PET\n    p[,3] <- max(pet)\n    ### BIO_26: Min PET\n    p[,4] <- min(pet)\n    ### BIO_27: Range of PET (PETmax-PETmin)\n    p[,5] <- p[,3]-p[,4]\n    \n    wet <- window(prec)\n    hot <- window(tavg)/3\n    pet2 <- c(pet,pet[1:2])\n    \n    ### BIO_28: PET of wettest quarter\n    p[,6] <- sum(pet2[c(which.max(wet):(which.max(wet)+2))])\n    ### BIO_29:\tPET of driest quarter\n    p[,7] <- sum(pet2[c(which.min(wet):(which.min(wet)+2))])\n    ### BIO_30:\tPET of warmest quarter\n    p[,8] <- sum(pet2[c(which.max(hot):(which.max(hot)+2))])\n    ### BIO_31:\tPET of coldest quarter\n    p[,9] <- sum(pet2[c(which.min(hot):(which.min(hot)+2))])\n    \n  }\n  \n  round(p, digits = 2)\n  return(p)\n  \n} \n\n# Divid temperature variables by 10\n\ndividTemp <- function(files, nameVar){\n  \n  layers <- grep(nameVar, files, value = T) %>%\n              mixedsort() %>% \n              stack()\n  \n  layers <- layers/10\n  \n  return(layers)\n  \n}\n\n# WorldClim SRAD\n\nrasterOptions(tmpdir = paste0(path, '/_temp'))\n\nsradfiles <- list.files(path = paste0(path, '/_raster/_climate/_current/_rad/_tif'), pattern = '.tif$', recursive = T, full.names = T)\nsradstack <- stack(sradfiles)\nnames(sradstack) <- paste('srad_', 01:12, sep='') # Change the names to files\nsradstack <- sradstack*0.408/1000\n\n# -----------------------\n# Current variables\n# -----------------------\n\nfiles_current <- list.files(paste0(path, '/_raster/_climate/_current/_asc'), full.names = T, pattern = '.asc$')\ntoMatch <- c('pr', 'tm')\nnamesVars <- gsub('.asc', '', basename(files_current)) %>%\n                gsub('\\\\d', '', .) %>%\n                gsub('_', '', .) %>%\n                unique() %>%\n                grep(paste0(toMatch, collapse = '|'), ., value = T)\n\n# namesVars <- c('tmean', 'tmax', 'tmin')\n\nlapply(files_current, nameVar = namesVars, FUN = dividTemp)\nlapply(files_current, FUN = dividTemp, nameVar = namesVars)\n#lapply(files_current, nameVar = 'tmin', FUN = dividTemp)\n \n# files <- lapply(namesDirs, list.files, full.names = T, pattern = '.asc$')\n\ntmin_stack  <- dividTemp(files = files_current, nameVar = 'tmin')\ntmax_stack  <- dividTemp(files = files_current, nameVar = 'tmax')\ntmean_stack <- dividTemp(files = files_current, nameVar = 'tmean')\nprec_stack  <- grep('prec', files_current, value = T) %>%\n                  mixedsort() %>%\n                  stack()\nzeroraster  <- tmin_stack[[1]] * 0 + 1 \n\nETstack <- 0.0023*sradstack*sqrt(reclassify(tmax_stack - tmin_stack, c(-Inf, 0, 0)))*(tmean_stack + 17.8)\nnames(ETstack) <-str_replace(names(ETstack),'srad','PET')\nETstack <- ETstack * c(31,29,31,30,31,30,31,31,30,31,30,31)\n\ndeficitstack <- prec_stack - ETstack\nDefAndTemp <- cbind(as.matrix(deficitstack), as.matrix(tmean_stack), as.matrix(tmax_stack))\nbiovalues  <- t(apply(DefAndTemp, 1, cumTemp))\n\nnamesVars <- paste0('bio_', 30:33)\n\nfor(i in 1:length(namesVars)){\n  \n  layer <- zeroraster\n  values(layer) <- biovalues[,i]\n  writeRaster(layer, paste0(path, '/_raster/_climate/_current/_asc/', namesVars[i]), format = 'ascii', overwrite = T, NAflag = -9999)\n  \n}\n\nETPAndPrec <- cbind(as.matrix(ETstack),as.matrix(prec_stack),as.matrix(tmean_stack))\netpbios    <- t(apply(ETPAndPrec, 1, etpvars))\nnamesETPs  <- paste0('bio_', 21:29)\n\nfor(i in 1:ncol(etpbios)){\n  \n  layer <- zeroraster\n  values(layer) <- etpbios[,i]\n  writeRaster(layer, paste0(path, '/_raster/_climate/_current/_asc/', namesETPs[i]), format = 'ascii', overwrite = T, NAflag = -9999)\n  \n}\n\n\n\n# -----------------------\n# Future variables\n# -----------------------\n\nyears <- c('_2030', '_2050')\nmodels <- list.files(paste0(path, '/_raster/_climate/_future/_rcp60/_asc/', years[1]))\n\n# registerDoMC(length(models))\n\n# cl <- makeCluster(length(models)) #N?mero de nucleos a utilizar\ncl <- makeCluster(18)\n\nregisterDoSNOW(cl)\n\n# y = 1 # climate\ny = 2 # cormacarena\n\n# foreach(y = 1:length(years)) %do% {\n#   \n#   print(years[y])\n  \nforeach(j = 2:length(models), .packages = c('raster', 'rgdal', 'dplyr', 'gtools', 'foreach', 'stringr', 'maptools', 'rgeos')) %dopar% {\n    \n    # print(models[j])\n    \n    files <- paste0(path, '/_raster/_climate/_future/_rcp60/_asc/', years[y], '/', models[j]) %>%\n              list.files(., full.names = T, pattern = '.asc$') %>%\n              mixedsort()\n    \n    # print(paste0(models[j], ' files'))\n    \n    tminstack  <- grep('tmin', files, value = T) %>%\n                    mixedsort() %>%\n                    stack() \n    tminstack  <- tminstack/10\n    \n    # print(paste0(models[j], ' tminStack'))\n    \n    tmeanstack <- grep('tmean', files, value = T) %>%\n                    mixedsort() %>%\n                    stack() \n    tmeanstack <- tmeanstack/10\n    \n    print(paste0(models[j], 'tmeanStack'))\n    \n    tmaxstack <- grep('tmax', files, value = T) %>%\n                    mixedsort() %>%\n                    stack() \n    tmaxstack <- tmaxstack/10\n    \n    print(paste0(models[j], ' tmaxStack'))\n    \n    precstack <- grep('prec', files, value = T) %>%\n                    mixedsort() %>%\n                    stack() \n    print(paste0(models[j], ' precStack'))\n    \n    zeroraster <- tminstack[[1]] * 0 + 1 \n    \n    # print('ETStack')\n    \n    ETstack <- 0.0023*sradstack*sqrt(reclassify(tmaxstack - tminstack, c(-Inf, 0, 0)))*(tmeanstack + 17.8)\n    names(ETstack) <-str_replace(names(ETstack),'srad','PET')\n    ETstack <- ETstack * c(31,29,31,30,31,30,31,31,30,31,30,31)\n    \n    # print(paste0(models[j], ' to deficit stack'))\n\n    deficitstack <- precstack-ETstack\n    DefAndTemp   <- cbind(as.matrix(deficitstack), as.matrix(tmeanstack), as.matrix(tmaxstack))\n\n    biovalues <-  t(apply(DefAndTemp, 1, cumTemp))\n    biovalues_vars <- paste0('bio_', 30:33)\n\n    # print(paste0(models[j], ' to Write other Var'))\n    \n    for(i in 1:length(biovalues_vars)){\n      \n      layer <- zeroraster\n      values(layer) <- biovalues[,i]\n      writeRaster(layer, paste0(path, '/_raster/_climate/_future/_rcp60/_asc/', years[y], '/', models[j], '/', biovalues_vars[i], '.asc'), overwrite = T, NAflag = -9999)\n      \n    }\n    \n    # print('ETP Bioclimatics')\n    \n    # ETP Bioclimatics\n    \n    ETPAndPrec <- cbind(as.matrix(ETstack),as.matrix(precstack),as.matrix(tmeanstack))\n    etpbios    <- t(apply(ETPAndPrec, 1, etpvars))\n    \n    print(paste0(models[j], ' to Write ETP Vars'))\n    \n    namesETPs  <- paste0('bio_', 21:29)\n    \n    for(i in 1:ncol(etpbios)){\n      \n      layer <- zeroraster\n      values(layer) <- etpbios[,i]\n      writeRaster(layer, paste0(path, '/_raster/_climate/_future/_rcp60/_asc/', years[y], '/', models[j], '/',  namesETPs[i], '.asc'), overwrite = T, NAflag = -9999)\n      \n    }\n    \n    # print(paste0(models[j], ' Finish...'))\n\n}\n  \n#}\n\n",
    "created" : 1498136659814.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "211|38|221|0|\n234|2|291|0|\n",
    "hash" : "3035366655",
    "id" : "46346924",
    "lastKnownWriteTime" : 1498147529,
    "last_content_update" : 1498149011402,
    "path" : "Z:/_cam/_codes/_r/_prepareVariables/5_otherVariables_2.R",
    "project_path" : "5_otherVariables_2.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}